{
  "$schema": "https://schema.management.azure.com/schemas/2018-05-01/subscriptionDeploymentTemplate.json#",
  "contentVersion": "1.0.0.0",
  "metadata": {
    "_generator": {
      "name": "bicep",
      "version": "0.29.47.4906",
      "templateHash": "9680223530082050205"
    }
  },
  "parameters": {
    "ResourceGroupName": {
      "type": "string",
      "defaultValue": "ai-unlimited-workspace",
      "metadata": {
        "description": "name for the resource group."
      }
    },
    "AiUnlimitedName": {
      "type": "string",
      "metadata": {
        "description": "Name for the Workspace service's virtual machine."
      }
    },
    "OSVersion": {
      "type": "string",
      "defaultValue": "Ubuntu-2004",
      "allowedValues": [
        "Ubuntu-1804",
        "Ubuntu-2004",
        "Ubuntu-2204"
      ],
      "metadata": {
        "description": "The Ubuntu version for the VM. This will pick a fully patched image of this given Ubuntu version."
      }
    },
    "InstanceType": {
      "type": "string",
      "defaultValue": "Standard_D2s_v3",
      "metadata": {
        "description": "The AI Unlimited VM type"
      }
    },
    "Network": {
      "type": "string",
      "metadata": {
        "description": "Name of the network to run the AI Unlimited service in"
      }
    },
    "Subnet": {
      "type": "string",
      "metadata": {
        "description": "Name of the subnet to run the AI Unlimited service in"
      }
    },
    "SecurityGroup": {
      "type": "string",
      "defaultValue": "AiUnlimitedSecurityGroup",
      "metadata": {
        "description": "Name of the network security group"
      }
    },
    "AccessCIDRs": {
      "type": "array",
      "defaultValue": [
        "0.0.0.0/0"
      ],
      "metadata": {
        "description": "The CIDR ranges that can be used to communicate with the AI Unlimited service instance."
      }
    },
    "JupyterHttpPort": {
      "type": "int",
      "defaultValue": 8888,
      "metadata": {
        "description": "port to access the Jupyter Labs UI."
      }
    },
    "AiUnlimitedAuthPort": {
      "type": "int",
      "defaultValue": 3000,
      "metadata": {
        "description": "port to access the AI Unlimited auth service."
      }
    },
    "AiUnlimitedGrpcPort": {
      "type": "int",
      "defaultValue": 3282,
      "metadata": {
        "description": "port to access the AI Unlimited service api."
      }
    },
    "SourceAppSecGroups": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Source Application Security Groups to access the AI Unlimited service api."
      }
    },
    "detinationAppSecGroups": {
      "type": "array",
      "defaultValue": [],
      "metadata": {
        "description": "Destination Application Security Groups to give access to AI Unlimited service instance."
      }
    },
    "RoleDefinitionId": {
      "type": "string",
      "metadata": {
        "description": "GUID of the AI Unlimited Role"
      }
    },
    "UseKeyVault": {
      "type": "string",
      "defaultValue": "New",
      "allowedValues": [
        "New",
        "None"
      ],
      "metadata": {
        "description": "should we create a new Azure Key Vault for bootstrapping the AI Unlimited Engine nodes."
      }
    },
    "UsePersistentVolume": {
      "type": "string",
      "defaultValue": "New",
      "allowedValues": [
        "New",
        "Existing"
      ],
      "metadata": {
        "description": "should we use a new or existing volume for persistent data on the AI Unlimited server."
      }
    },
    "PersistentVolumeSize": {
      "type": "int",
      "defaultValue": 100,
      "metadata": {
        "description": "size of the optional persistent disk to the AI Unlimited server."
      }
    },
    "ExistingPersistentVolume": {
      "type": "string",
      "defaultValue": "NONE",
      "metadata": {
        "description": "Name of the existing persistent volume to attach. Must be in the same region and resourcegroup zone as the AI Unlimited server."
      }
    },
    "AiUnlimitedVersion": {
      "type": "string",
      "defaultValue": "v0.3.0",
      "metadata": {
        "description": "Container Version of the AI Unlimited service"
      }
    },
    "AiUnlimitedUIVersion": {
      "type": "string",
      "defaultValue": "v0.0.8",
      "metadata": {
        "description": "Container Version of the AI Unlimited UI service"
      }
    },
    "JupyterVersion": {
      "type": "string",
      "defaultValue": "v0.0.52",
      "metadata": {
        "description": "Container Version of the Jupyter Labs service"
      }
    },
    "JupyterToken": {
      "type": "securestring",
      "metadata": {
        "description": "Join token for the Jupyter Labs service"
      }
    },
    "Tags": {
      "type": "object",
      "defaultValue": {},
      "metadata": {
        "description": "Tags to apply to all newly created resources, in the form of {\"key_one\":\"value_one\",\"key_two\":\"value_two\"}"
      }
    }
  },
  "variables": {
    "$fxv#0": "#cloud-config\nwrite_files:\n- encoding: b64\n  content: \"{0}\"\n  owner: root:root\n  path: /usr/lib/systemd/system/ai-unlimited.service\n  permissions: '0640'\n- encoding: b64\n  content: \"{1}\"\n  owner: root:root\n  path: /usr/lib/systemd/system/jupyter.service\n  permissions: '0640'\n- encoding: b64\n  content: \"{2}\"\n  owner: root:root\n  path: /usr/lib/systemd/system/ai-unlimited-scheduler.service\n  permissions: '0640'\n- encoding: b64\n  content: \"{3}\"\n  owner: root:root\n  path: /usr/lib/systemd/system/ai-unlimited-ui.service\n  permissions: '0640'\n\nruncmd:\n- mkdir -p /etc/td \n- |\n    export PERMDISK=$(lsscsi 1:0:0:0 -b | awk '{{print $2}}');\n    if [ -n \"${{PERMDISK}}\" ]; then blkid --match-token TYPE=ext4 ${{PERMDISK}} || (mkfs.ext4 -m0 ${{PERMDISK}} && e2label ${{PERMDISK}} WORKSPACES); fi\n    /usr/bin/echo \"LABEL=WORKSPACES /etc/td ext4 defaults 0 2\" >> /etc/fstab\n    /usr/bin/mount -a\n- while [ $(systemctl status docker | grep \"active (running)\" | wc -l) -lt 1 ]; do sleep 5; done\n- mkdir -p /etc/td/ai-unlimited\n- echo \"TD_VCD_INIT_API_KEY=$(LC_ALL=C tr -dc A-Za-z0-9 </dev/urandom | head -c 64)\" > /etc/td/ai-unlimited/init_api_key.txt\n- sleep 60\n- systemctl enable ai-unlimited.service\n- systemctl start ai-unlimited.service\n- systemctl enable jupyter.service\n- systemctl start jupyter.service\n- systemctl enable ai-unlimited-scheduler.service\n- systemctl start ai-unlimited-scheduler.service\n- systemctl enable ai-unlimited-ui.service\n- systemctl start ai-unlimited-ui.service\n",
    "$fxv#1": "[Unit]\nDescription=AI Unlimited\nAfter=docker.service\nRequires=docker.service\nStartLimitInterval=200\nStartLimitBurst=10\n\n[Service]\nTimeoutStartSec=0\nRestart=always\nRestartSec=2\nEnvironmentFile=/etc/td/ai-unlimited/init_api_key.txt\nExecStartPre=-/usr/bin/docker volume create ssl_certs\nExecStartPre=-/usr/bin/docker network create -d bridge ai_unlimited\nExecStartPre=-/usr/bin/mkdir -p /etc/td/ai-unlimited\nExecStartPre=-/usr/bin/docker stop %n\nExecStartPre=-/usr/bin/docker rm %n\nExecStartPre=/usr/bin/docker pull {0}/{1}:{2}\n\nExecStart=/usr/bin/docker run \\\n    -e accept_license=Y \\\n    -e PLATFORM=azure \\\n    -e ARM_USE_MSI=true \\\n    -e ARM_SUBSCRIPTION_ID={5} \\\n    -e ARM_TENANT_ID={6} \\\n    -e TD_VCD_INIT_API_KEY \\\n    -p {3}:3000 \\\n    -p {4}:3282 \\\n    -v /etc/td/ai-unlimited:/etc/td \\\n    -v ssl_certs:/etc/td/ssl \\\n    --network ai_unlimited {7} \\\n    --rm --name %n {0}/{1}:{2} workspaces serve -v\n\n[Install]\nWantedBy=multi-user.target",
    "$fxv#2": "[Unit]\nDescription=jupyter\nAfter=docker.service\nRequires=docker.service\nStartLimitInterval=200\nStartLimitBurst=10\n\n[Service]\nTimeoutStartSec=0\nRestart=always\nRestartSec=2\nExecStartPre=-/usr/bin/docker network create -d bridge ai_unlimited\nExecStartPre=-/usr/bin/mkdir -p /etc/td/jupyter/{{userdata,ipython}}\nExecStartPre=-/usr/bin/docker stop %n\nExecStartPre=-/usr/bin/docker rm %n\nExecStartPre=/usr/bin/docker pull {0}/{1}:{2}\n\nExecStart=/usr/bin/docker run \\\n    -e accept_license=Y \\\n    -e JUPYTER_TOKEN={4} \\\n    -v /etc/td/jupyter/userdata:/home/jovyan/JupyterLabRoot/userdata \\\n    -v /etc/td/jupyter/ipython:/home/jovyan/.ipython \\\n    -p {3}:8888 \\\n    --network ai_unlimited \\\n    --rm --name %n {0}/{1}:{2}\n\n[Install]\nWantedBy=multi-user.target\n",
    "$fxv#3": "[Unit]\nDescription=AI Unlimited Scheduler\nAfter=ai-unlimited.service\nRequires=ai-unlimited.service\nStartLimitInterval=200\nStartLimitBurst=10\n\n[Service]\nTimeoutStartSec=0\nRestart=always\nRestartSec=2\nExecStartPre=-/usr/bin/docker stop %n\nExecStartPre=-/usr/bin/docker rm %n\nExecStartPre=/usr/bin/docker pull {0}/{1}:{2}\nExecStart=/usr/bin/docker run \\\n    --network ai_unlimited \\\n    -p {3}:50061 \\\n    -v /etc/td/ai-unlimited:/etc/td \\\n    -e TD_WSSCHED_LOG_PATH=/etc/td/workspaces/scheduler_logs \\\n    -e TD_WSSCHED_TASK_LOG_PATH=/etc/td/workspaces/scheduler_logs/projects \\\n    -e TD_WSSCHED_POL_INTERVAL=2 \\\n    -e TD_WS_CONTAINER_NAME=ai-unlimited.service \\\n    --rm --name %n {0}/{1}:{2} workspace-event-scheduler serve\n[Install]\nWantedBy=multi-user.target",
    "$fxv#4": "[Unit]\nDescription=AI Unlimited UI\nAfter=ai-unlimited.service\nRequires=ai-unlimited.service\nStartLimitInterval=200\nStartLimitBurst=10\n\n[Service]\nTimeoutStartSec=0\nRestart=always\nRestartSec=2\nEnvironmentFile=/etc/td/ai-unlimited/init_api_key.txt\nExecStartPre=-/usr/bin/docker stop %n\nExecStartPre=-/usr/bin/docker rm %n\nExecStartPre=/usr/bin/docker pull {0}/{1}:{2}\n\nExecStart=/usr/bin/docker run \\\n    -e TD_VCD_USE_TLS=false \\\n    -e TD_VCD_AUTH_PORT={4}\\\n    -e TD_VCD_API_PORT={5}\\\n    -e TD_VCD_INIT_API_KEY \\\n    -p 80:80 \\\n    -p 443:443 \\\n    -v ssl_certs:/etc/ssl/td \\\n    --network ai_unlimited {6} \\\n    --rm --name %n {0}/{1}:{2}   \n\n[Install]\nWantedBy=multi-user.target",
    "AiUnlimitedSchedulerHttpPort": 50061,
    "AiUnlimitedUIHttpPort": 80,
    "AiUnlimitedUIHttpsPort": 443,
    "AiUnlimitedSchedulerVersion": "latest",
    "roleAssignmentName": "[guid(subscription().id, parameters('AiUnlimitedName'), subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName')), parameters('RoleDefinitionId'))]",
    "dnsId": "[uniqueString(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName')), deployment().name, parameters('AiUnlimitedName'))]",
    "dnsLabelPrefix": "[format('td{0}', variables('dnsId'))]",
    "nlbDnsLabelPrefix": "[format('td{0}-nlb', variables('dnsId'))]",
    "registry": "teradata",
    "workspaceRepository": "ai-unlimited-workspaces",
    "jupyterRepository": "ai-unlimited-jupyter",
    "workspaceSchedulerRepository": "ai-unlimited-scheduler",
    "workspaceUIRepository": "ai-unlimited-workspaces-ui"
  },
  "resources": [
    {
      "type": "Microsoft.Authorization/roleAssignments",
      "apiVersion": "2022-04-01",
      "name": "[variables('roleAssignmentName')]",
      "properties": {
        "roleDefinitionId": "[subscriptionResourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleDefinitionId'))]",
        "principalId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'ai-unlimited'), '2022-09-01').outputs.PrincipleId.value]"
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'ai-unlimited')]"
      ]
    },
    {
      "condition": "[equals(parameters('UseKeyVault'), 'New')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "vault",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "encryptVolumes": {
            "value": true
          },
          "keyVaultName": {
            "value": "[parameters('AiUnlimitedName')]"
          },
          "location": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName')), '2022-09-01', 'full').location]"
          },
          "tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "6929508783023913887"
            }
          },
          "parameters": {
            "encryptVolumes": {
              "type": "bool"
            },
            "keyVaultName": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "uuid": {
              "type": "string",
              "defaultValue": "[newGuid()]"
            }
          },
          "variables": {
            "nameCharLimit": 24,
            "uniqueName": "[format('{0}-{1}', parameters('keyVaultName'), uniqueString(parameters('uuid')))]",
            "uniqueKeyVaultName": "[substring(format('{0}', variables('uniqueName')), 0, if(less(length(variables('uniqueName')), variables('nameCharLimit')), length(variables('uniqueName')), variables('nameCharLimit')))]"
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults",
              "apiVersion": "2023-02-01",
              "name": "[variables('uniqueKeyVaultName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "sku": {
                  "family": "A",
                  "name": "standard"
                },
                "tenantId": "[subscription().tenantId]",
                "softDeleteRetentionInDays": 7,
                "enableSoftDelete": true,
                "enablePurgeProtection": "[if(parameters('encryptVolumes'), true(), null())]",
                "enabledForDiskEncryption": "[parameters('encryptVolumes')]",
                "accessPolicies": []
              }
            }
          ],
          "outputs": {
            "id": {
              "type": "string",
              "value": "[resourceId('Microsoft.KeyVault/vaults', variables('uniqueKeyVaultName'))]"
            },
            "name": {
              "type": "string",
              "value": "[variables('uniqueKeyVaultName')]"
            }
          }
        }
      }
    },
    {
      "condition": "[equals(parameters('UseKeyVault'), 'New')]",
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "vault-access-policy",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "vaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'vault'), '2022-09-01').outputs.name.value]"
          },
          "accessPolicy": {
            "value": {
              "tenantId": "[subscription().tenantId]",
              "objectId": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'ai-unlimited'), '2022-09-01').outputs.PrincipleId.value]",
              "permissions": {
                "keys": [
                  "Create",
                  "Delete",
                  "Get",
                  "List",
                  "Update",
                  "Purge",
                  "Recover",
                  "Decrypt",
                  "Encrypt",
                  "Sign",
                  "UnwrapKey",
                  "Verify",
                  "WrapKey",
                  "GetRotationPolicy",
                  "SetRotationPolicy"
                ],
                "secrets": [
                  "Get",
                  "Set",
                  "Delete",
                  "List",
                  "Purge"
                ],
                "storage": [
                  "Get"
                ]
              }
            }
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "17702031998905620424"
            }
          },
          "parameters": {
            "vaultName": {
              "type": "string"
            },
            "accessPolicy": {
              "type": "object"
            }
          },
          "resources": [
            {
              "type": "Microsoft.KeyVault/vaults/accessPolicies",
              "apiVersion": "2022-07-01",
              "name": "[format('{0}/add', parameters('vaultName'))]",
              "properties": {
                "accessPolicies": [
                  "[parameters('accessPolicy')]"
                ]
              }
            }
          ]
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'ai-unlimited')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'vault')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "firewall",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName')), '2022-09-01', 'full').location]"
          },
          "name": {
            "value": "[parameters('SecurityGroup')]"
          },
          "accessCidrs": {
            "value": "[parameters('AccessCIDRs')]"
          },
          "sshAccess": {
            "value": false
          },
          "aiUnlimitedAuthPort": {
            "value": "[parameters('AiUnlimitedAuthPort')]"
          },
          "aiUnlimitedGrpcPort": {
            "value": "[parameters('AiUnlimitedGrpcPort')]"
          },
          "aiUnlimitedSchedulerHttpPort": {
            "value": "[variables('AiUnlimitedSchedulerHttpPort')]"
          },
          "aiUnlimitedUIHttpPort": {
            "value": "[variables('AiUnlimitedUIHttpPort')]"
          },
          "aiUnlimitedUIHttpsPort": {
            "value": "[variables('AiUnlimitedUIHttpsPort')]"
          },
          "jupyterHttpPort": {
            "value": "[parameters('JupyterHttpPort')]"
          },
          "sourceAppSecGroups": {
            "value": "[parameters('SourceAppSecGroups')]"
          },
          "detinationAppSecGroups": {
            "value": "[parameters('detinationAppSecGroups')]"
          },
          "tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "11675442112517489951"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "accessCidrs": {
              "type": "array",
              "defaultValue": []
            },
            "sourceAppSecGroups": {
              "type": "array",
              "defaultValue": []
            },
            "detinationAppSecGroups": {
              "type": "array",
              "defaultValue": []
            },
            "sshAccess": {
              "type": "bool",
              "defaultValue": false
            },
            "aiUnlimitedAuthPort": {
              "type": "int",
              "defaultValue": 0
            },
            "aiUnlimitedGrpcPort": {
              "type": "int",
              "defaultValue": 0
            },
            "aiUnlimitedSchedulerHttpPort": {
              "type": "int",
              "defaultValue": 0
            },
            "aiUnlimitedUIHttpPort": {
              "type": "int",
              "defaultValue": 0
            },
            "aiUnlimitedUIHttpsPort": {
              "type": "int",
              "defaultValue": 0
            },
            "jupyterHttpPort": {
              "type": "int",
              "defaultValue": 0
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "uuid": {
              "type": "string",
              "defaultValue": "[newGuid()]"
            }
          },
          "variables": {
            "nameCharLimit": 60,
            "uniqueName": "[format('{0}-{1}', parameters('name'), uniqueString(parameters('uuid')))]",
            "uniqueSecurityGroupName": "[substring(format('{0}', variables('uniqueName')), 0, if(less(length(variables('uniqueName')), variables('nameCharLimit')), length(variables('uniqueName')), variables('nameCharLimit')))]"
          },
          "resources": [
            {
              "type": "Microsoft.Network/networkSecurityGroups",
              "apiVersion": "2022-11-01",
              "name": "[variables('uniqueSecurityGroupName')]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]"
            },
            {
              "condition": "[parameters('sshAccess')]",
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', variables('uniqueSecurityGroupName'), format('{0}-ssh-allow', variables('uniqueSecurityGroupName')))]",
              "properties": {
                "copy": [
                  {
                    "name": "destinationApplicationSecurityGroups",
                    "count": "[length(parameters('detinationAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('detinationAppSecGroups')[copyIndex('destinationApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  },
                  {
                    "name": "sourceApplicationSecurityGroups",
                    "count": "[length(parameters('sourceAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('sourceAppSecGroups')[copyIndex('sourceApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  }
                ],
                "access": "Allow",
                "description": "allow ssh to the workspace instance",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "22",
                "direction": "Inbound",
                "priority": 700,
                "protocol": "Tcp",
                "sourceAddressPrefixes": "[parameters('accessCidrs')]",
                "sourcePortRange": "*"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('uniqueSecurityGroupName'))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('aiUnlimitedAuthPort'), 0))]",
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', variables('uniqueSecurityGroupName'), format('{0}-workspace-auth-allow', variables('uniqueSecurityGroupName')))]",
              "properties": {
                "copy": [
                  {
                    "name": "destinationApplicationSecurityGroups",
                    "count": "[length(parameters('detinationAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('detinationAppSecGroups')[copyIndex('destinationApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  },
                  {
                    "name": "sourceApplicationSecurityGroups",
                    "count": "[length(parameters('sourceAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('sourceAppSecGroups')[copyIndex('sourceApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  }
                ],
                "access": "Allow",
                "description": "allow http to the workspace instance",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "[string(parameters('aiUnlimitedAuthPort'))]",
                "direction": "Inbound",
                "priority": 701,
                "protocol": "Tcp",
                "sourceAddressPrefixes": "[parameters('accessCidrs')]",
                "sourcePortRange": "*"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('uniqueSecurityGroupName'))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('aiUnlimitedGrpcPort'), 0))]",
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', variables('uniqueSecurityGroupName'), format('{0}-workspace-grpc-allow', variables('uniqueSecurityGroupName')))]",
              "properties": {
                "copy": [
                  {
                    "name": "destinationApplicationSecurityGroups",
                    "count": "[length(parameters('detinationAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('detinationAppSecGroups')[copyIndex('destinationApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  },
                  {
                    "name": "sourceApplicationSecurityGroups",
                    "count": "[length(parameters('sourceAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('sourceAppSecGroups')[copyIndex('sourceApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  }
                ],
                "access": "Allow",
                "description": "allow grpc to the workspace instance",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "[string(parameters('aiUnlimitedGrpcPort'))]",
                "direction": "Inbound",
                "priority": 702,
                "protocol": "Tcp",
                "sourceAddressPrefixes": "[parameters('accessCidrs')]",
                "sourcePortRange": "*"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('uniqueSecurityGroupName'))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('jupyterHttpPort'), 0))]",
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', variables('uniqueSecurityGroupName'), format('{0}-juptyer-http-allow', variables('uniqueSecurityGroupName')))]",
              "properties": {
                "copy": [
                  {
                    "name": "destinationApplicationSecurityGroups",
                    "count": "[length(parameters('detinationAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('detinationAppSecGroups')[copyIndex('destinationApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  },
                  {
                    "name": "sourceApplicationSecurityGroups",
                    "count": "[length(parameters('sourceAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('sourceAppSecGroups')[copyIndex('sourceApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  }
                ],
                "access": "Allow",
                "description": "allow http to the jupyter instance",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "[string(parameters('jupyterHttpPort'))]",
                "direction": "Inbound",
                "priority": 703,
                "protocol": "Tcp",
                "sourceAddressPrefixes": "[parameters('accessCidrs')]",
                "sourcePortRange": "*"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('uniqueSecurityGroupName'))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('aiUnlimitedSchedulerHttpPort'), 0))]",
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', variables('uniqueSecurityGroupName'), format('{0}-scheduler-http-allow', variables('uniqueSecurityGroupName')))]",
              "properties": {
                "copy": [
                  {
                    "name": "destinationApplicationSecurityGroups",
                    "count": "[length(parameters('detinationAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('detinationAppSecGroups')[copyIndex('destinationApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  },
                  {
                    "name": "sourceApplicationSecurityGroups",
                    "count": "[length(parameters('sourceAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('sourceAppSecGroups')[copyIndex('sourceApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  }
                ],
                "access": "Allow",
                "description": "allow http to the scheduler instance",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "[string(parameters('aiUnlimitedSchedulerHttpPort'))]",
                "direction": "Inbound",
                "priority": 704,
                "protocol": "Tcp",
                "sourceAddressPrefixes": "[parameters('accessCidrs')]",
                "sourcePortRange": "*"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('uniqueSecurityGroupName'))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('aiUnlimitedUIHttpPort'), 0))]",
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', variables('uniqueSecurityGroupName'), format('{0}-workspace-ui-http-allow', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "destinationApplicationSecurityGroups",
                    "count": "[length(parameters('detinationAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('detinationAppSecGroups')[copyIndex('destinationApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  },
                  {
                    "name": "sourceApplicationSecurityGroups",
                    "count": "[length(parameters('sourceAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('sourceAppSecGroups')[copyIndex('sourceApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  }
                ],
                "access": "Allow",
                "description": "allow http to the workspace ui instance",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "[string(parameters('aiUnlimitedUIHttpPort'))]",
                "direction": "Inbound",
                "priority": 705,
                "protocol": "Tcp",
                "sourceAddressPrefixes": "[parameters('accessCidrs')]",
                "sourcePortRange": "*"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('uniqueSecurityGroupName'))]"
              ]
            },
            {
              "condition": "[not(equals(parameters('aiUnlimitedUIHttpsPort'), 0))]",
              "type": "Microsoft.Network/networkSecurityGroups/securityRules",
              "apiVersion": "2023-04-01",
              "name": "[format('{0}/{1}', variables('uniqueSecurityGroupName'), format('{0}-workspace-ui-https-allow', parameters('name')))]",
              "properties": {
                "copy": [
                  {
                    "name": "destinationApplicationSecurityGroups",
                    "count": "[length(parameters('detinationAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('detinationAppSecGroups')[copyIndex('destinationApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  },
                  {
                    "name": "sourceApplicationSecurityGroups",
                    "count": "[length(parameters('sourceAppSecGroups'))]",
                    "input": {
                      "id": "[parameters('sourceAppSecGroups')[copyIndex('sourceApplicationSecurityGroups')]]",
                      "location": "[parameters('location')]"
                    }
                  }
                ],
                "access": "Allow",
                "description": "allow https to the workspace ui instance",
                "destinationAddressPrefix": "*",
                "destinationPortRange": "[string(parameters('aiUnlimitedUIHttpsPort'))]",
                "direction": "Inbound",
                "priority": 706,
                "protocol": "Tcp",
                "sourceAddressPrefixes": "[parameters('accessCidrs')]",
                "sourcePortRange": "*"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkSecurityGroups', variables('uniqueSecurityGroupName'))]"
              ]
            }
          ],
          "outputs": {
            "Id": {
              "type": "string",
              "value": "[resourceId('Microsoft.Network/networkSecurityGroups', variables('uniqueSecurityGroupName'))]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "loadbalancer",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "name": {
            "value": "[parameters('AiUnlimitedName')]"
          },
          "location": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName')), '2022-09-01', 'full').location]"
          },
          "dnsPrefix": {
            "value": "[variables('dnsLabelPrefix')]"
          },
          "aiUnlimitedAuthPort": {
            "value": "[parameters('AiUnlimitedAuthPort')]"
          },
          "aiUnlimitedGrpcPort": {
            "value": "[parameters('AiUnlimitedGrpcPort')]"
          },
          "aiUnlimitedSchedulerHttpPort": {
            "value": "[variables('AiUnlimitedSchedulerHttpPort')]"
          },
          "aiUnlimitedUIHttpPort": {
            "value": "[variables('AiUnlimitedUIHttpPort')]"
          },
          "aiUnlimitedUIHttpsPort": {
            "value": "[variables('AiUnlimitedUIHttpsPort')]"
          },
          "jupyterHttpPort": {
            "value": "[parameters('JupyterHttpPort')]"
          },
          "tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "5109107861889662451"
            }
          },
          "parameters": {
            "name": {
              "type": "string"
            },
            "location": {
              "type": "string"
            },
            "dnsPrefix": {
              "type": "string"
            },
            "aiUnlimitedAuthPort": {
              "type": "int",
              "defaultValue": 0
            },
            "aiUnlimitedGrpcPort": {
              "type": "int",
              "defaultValue": 0
            },
            "aiUnlimitedSchedulerHttpPort": {
              "type": "int",
              "defaultValue": 0
            },
            "jupyterHttpPort": {
              "type": "int",
              "defaultValue": 0
            },
            "aiUnlimitedUIHttpPort": {
              "type": "int",
              "defaultValue": 0
            },
            "aiUnlimitedUIHttpsPort": {
              "type": "int",
              "defaultValue": 0
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            }
          },
          "resources": [
            {
              "type": "Microsoft.Network/loadBalancers",
              "apiVersion": "2021-08-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "sku": {
                "name": "Standard"
              },
              "properties": {
                "frontendIPConfigurations": [
                  {
                    "name": "[format('{0}Inbound', parameters('name'))]",
                    "properties": {
                      "publicIPAddress": {
                        "id": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-inbound', parameters('name'))), '2022-09-01').outputs.Id.value]"
                      }
                    }
                  },
                  {
                    "name": "[format('{0}Outbound', parameters('name'))]",
                    "properties": {
                      "publicIPAddress": {
                        "id": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-outbound', parameters('name'))), '2022-09-01').outputs.Id.value]"
                      }
                    }
                  }
                ],
                "backendAddressPools": [
                  {
                    "name": "[format('{0}InboundBackendPool', parameters('name'))]"
                  },
                  {
                    "name": "[format('{0}OutboundBackendPool', parameters('name'))]"
                  }
                ],
                "loadBalancingRules": "[flatten(createArray(if(not(equals(parameters('aiUnlimitedAuthPort'), 0)), createArray(createObject('name', 'AiUnlimitedAuth', 'properties', createObject('frontendIPConfiguration', createObject('id', resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('name'), format('{0}Inbound', parameters('name')))), 'backendAddressPool', createObject('id', resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('name'), format('{0}OutboundBackendPool', parameters('name')))), 'frontendPort', parameters('aiUnlimitedAuthPort'), 'backendPort', parameters('aiUnlimitedAuthPort'), 'enableFloatingIP', false(), 'idleTimeoutInMinutes', 15, 'protocol', 'Tcp', 'enableTcpReset', true(), 'loadDistribution', 'Default', 'disableOutboundSnat', true(), 'probe', createObject('id', resourceId('Microsoft.Network/loadBalancers/probes', parameters('name'), format('{0}AuthLbProbe', parameters('name'))))))), createArray()), if(not(equals(parameters('aiUnlimitedGrpcPort'), 0)), createArray(createObject('name', 'AiUnlimitedAPI', 'properties', createObject('frontendIPConfiguration', createObject('id', resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('name'), format('{0}Inbound', parameters('name')))), 'backendAddressPool', createObject('id', resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('name'), format('{0}OutboundBackendPool', parameters('name')))), 'frontendPort', parameters('aiUnlimitedGrpcPort'), 'backendPort', parameters('aiUnlimitedGrpcPort'), 'enableFloatingIP', false(), 'idleTimeoutInMinutes', 15, 'protocol', 'Tcp', 'enableTcpReset', true(), 'loadDistribution', 'Default', 'disableOutboundSnat', true(), 'probe', createObject('id', resourceId('Microsoft.Network/loadBalancers/probes', parameters('name'), format('{0}APILbProbe', parameters('name'))))))), createArray()), if(not(equals(parameters('jupyterHttpPort'), 0)), createArray(createObject('name', 'JupyterUI', 'properties', createObject('frontendIPConfiguration', createObject('id', resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('name'), format('{0}Inbound', parameters('name')))), 'backendAddressPool', createObject('id', resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('name'), format('{0}OutboundBackendPool', parameters('name')))), 'frontendPort', parameters('jupyterHttpPort'), 'backendPort', parameters('jupyterHttpPort'), 'enableFloatingIP', false(), 'idleTimeoutInMinutes', 15, 'protocol', 'Tcp', 'enableTcpReset', true(), 'loadDistribution', 'Default', 'disableOutboundSnat', true(), 'probe', createObject('id', resourceId('Microsoft.Network/loadBalancers/probes', parameters('name'), format('{0}JupyterLbProbe', parameters('name'))))))), createArray()), if(not(equals(parameters('aiUnlimitedSchedulerHttpPort'), 0)), createArray(createObject('name', 'AiUnlimitedSchedulerHttp', 'properties', createObject('frontendIPConfiguration', createObject('id', resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('name'), format('{0}Inbound', parameters('name')))), 'backendAddressPool', createObject('id', resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('name'), format('{0}OutboundBackendPool', parameters('name')))), 'frontendPort', parameters('aiUnlimitedSchedulerHttpPort'), 'backendPort', parameters('aiUnlimitedSchedulerHttpPort'), 'enableFloatingIP', false(), 'idleTimeoutInMinutes', 15, 'protocol', 'Tcp', 'enableTcpReset', true(), 'loadDistribution', 'Default', 'disableOutboundSnat', true(), 'probe', createObject('id', resourceId('Microsoft.Network/loadBalancers/probes', parameters('name'), format('{0}SchedulerHttpLbProbe', parameters('name'))))))), createArray()), if(not(equals(parameters('aiUnlimitedUIHttpPort'), 0)), createArray(createObject('name', 'AiUnlimitedUIHttp', 'properties', createObject('frontendIPConfiguration', createObject('id', resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('name'), format('{0}Inbound', parameters('name')))), 'backendAddressPool', createObject('id', resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('name'), format('{0}OutboundBackendPool', parameters('name')))), 'frontendPort', parameters('aiUnlimitedUIHttpPort'), 'backendPort', parameters('aiUnlimitedUIHttpPort'), 'enableFloatingIP', false(), 'idleTimeoutInMinutes', 15, 'protocol', 'Tcp', 'enableTcpReset', true(), 'loadDistribution', 'Default', 'disableOutboundSnat', true(), 'probe', createObject('id', resourceId('Microsoft.Network/loadBalancers/probes', parameters('name'), format('{0}UIHttpLbProbe', parameters('name'))))))), createArray()), if(not(equals(parameters('aiUnlimitedUIHttpsPort'), 0)), createArray(createObject('name', 'AiUnlimitedUIHttps', 'properties', createObject('frontendIPConfiguration', createObject('id', resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('name'), format('{0}Inbound', parameters('name')))), 'backendAddressPool', createObject('id', resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('name'), format('{0}OutboundBackendPool', parameters('name')))), 'frontendPort', parameters('aiUnlimitedUIHttpsPort'), 'backendPort', parameters('aiUnlimitedUIHttpsPort'), 'enableFloatingIP', false(), 'idleTimeoutInMinutes', 15, 'protocol', 'Tcp', 'enableTcpReset', true(), 'loadDistribution', 'Default', 'disableOutboundSnat', true(), 'probe', createObject('id', resourceId('Microsoft.Network/loadBalancers/probes', parameters('name'), format('{0}UIHttpsLbProbe', parameters('name'))))))), createArray())))]",
                "probes": "[flatten(createArray(if(not(equals(parameters('aiUnlimitedAuthPort'), 0)), createArray(createObject('name', format('{0}AuthLbProbe', parameters('name')), 'properties', createObject('protocol', 'Tcp', 'port', parameters('aiUnlimitedAuthPort'), 'intervalInSeconds', 5, 'numberOfProbes', 2))), createArray()), if(not(equals(parameters('aiUnlimitedGrpcPort'), 0)), createArray(createObject('name', format('{0}APILbProbe', parameters('name')), 'properties', createObject('protocol', 'Tcp', 'port', parameters('aiUnlimitedGrpcPort'), 'intervalInSeconds', 5, 'numberOfProbes', 2))), createArray()), if(not(equals(parameters('jupyterHttpPort'), 0)), createArray(createObject('name', format('{0}JupyterLbProbe', parameters('name')), 'properties', createObject('protocol', 'Tcp', 'port', parameters('jupyterHttpPort'), 'intervalInSeconds', 5, 'numberOfProbes', 2))), createArray()), if(not(equals(parameters('aiUnlimitedSchedulerHttpPort'), 0)), createArray(createObject('name', format('{0}SchedulerHttpLbProbe', parameters('name')), 'properties', createObject('protocol', 'Http', 'port', parameters('aiUnlimitedSchedulerHttpPort'), 'requestPath', '/healthcheck', 'intervalInSeconds', 5, 'numberOfProbes', 2))), createArray()), if(not(equals(parameters('aiUnlimitedUIHttpPort'), 0)), createArray(createObject('name', format('{0}UIHttpLbProbe', parameters('name')), 'properties', createObject('protocol', 'Http', 'port', parameters('aiUnlimitedUIHttpPort'), 'requestPath', '/', 'intervalInSeconds', 5, 'numberOfProbes', 2))), createArray()), if(not(equals(parameters('aiUnlimitedUIHttpsPort'), 0)), createArray(createObject('name', format('{0}UIHttpsLbProbe', parameters('name')), 'properties', createObject('protocol', 'Https', 'port', parameters('aiUnlimitedUIHttpsPort'), 'requestPath', '/', 'intervalInSeconds', 5, 'numberOfProbes', 2))), createArray())))]",
                "outboundRules": [
                  {
                    "name": "myOutboundRule",
                    "properties": {
                      "allocatedOutboundPorts": 10000,
                      "protocol": "All",
                      "enableTcpReset": false,
                      "idleTimeoutInMinutes": 15,
                      "backendAddressPool": {
                        "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('name'), format('{0}OutboundBackendPool', parameters('name')))]"
                      },
                      "frontendIPConfigurations": [
                        {
                          "id": "[resourceId('Microsoft.Network/loadBalancers/frontendIPConfigurations', parameters('name'), format('{0}Outbound', parameters('name')))]"
                        }
                      ]
                    }
                  }
                ]
              },
              "tags": "[parameters('tags')]",
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', format('{0}-inbound', parameters('name')))]",
                "[resourceId('Microsoft.Resources/deployments', format('{0}-outbound', parameters('name')))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-inbound', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}-inbound', parameters('name'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "dnsPrefix": {
                    "value": "[parameters('dnsPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "11278674213062453956"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "dnsPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "properties": {
                        "dnsSettings": "[if(not(equals(parameters('dnsPrefix'), '')), createObject('domainNameLabel', parameters('dnsPrefix')), null())]",
                        "publicIPAddressVersion": "IPv4",
                        "publicIPAllocationMethod": "Static",
                        "idleTimeoutInMinutes": 5
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "Id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                    },
                    "Ip": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-05-01').ipAddress]"
                    },
                    "Dns": {
                      "type": "string",
                      "value": "[if(not(equals(parameters('dnsPrefix'), '')), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-05-01').dnsSettings.fqdn, '')]"
                    }
                  }
                }
              }
            },
            {
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[format('{0}-outbound', parameters('name'))]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[format('{0}-outbound', parameters('name'))]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "dnsPrefix": {
                    "value": ""
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "11278674213062453956"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "dnsPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "properties": {
                        "dnsSettings": "[if(not(equals(parameters('dnsPrefix'), '')), createObject('domainNameLabel', parameters('dnsPrefix')), null())]",
                        "publicIPAddressVersion": "IPv4",
                        "publicIPAllocationMethod": "Static",
                        "idleTimeoutInMinutes": 5
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "Id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                    },
                    "Ip": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-05-01').ipAddress]"
                    },
                    "Dns": {
                      "type": "string",
                      "value": "[if(not(equals(parameters('dnsPrefix'), '')), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-05-01').dnsSettings.fqdn, '')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "nlbPools": {
              "type": "array",
              "value": [
                "[format('{0}InboundBackendPool', parameters('name'))]",
                "[format('{0}OutboundBackendPool', parameters('name'))]"
              ]
            },
            "PublicIp": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-inbound', parameters('name'))), '2022-09-01').outputs.Ip.value]"
            },
            "PublicDns": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deployments', format('{0}-inbound', parameters('name'))), '2022-09-01').outputs.Dns.value]"
            }
          }
        }
      }
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "ai-unlimited",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "location": {
            "value": "[reference(subscriptionResourceId('Microsoft.Resources/resourceGroups', parameters('ResourceGroupName')), '2022-09-01', 'full').location]"
          },
          "name": {
            "value": "[parameters('AiUnlimitedName')]"
          },
          "adminUsername": {
            "value": "azureuser"
          },
          "sshPublicKey": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'Public-Key'), '2022-09-01').outputs.PublicKey.value]"
          },
          "dnsLabelPrefix": {
            "value": "[variables('dnsLabelPrefix')]"
          },
          "vmSize": {
            "value": "[parameters('InstanceType')]"
          },
          "subnetId": {
            "value": "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Network/virtualNetworks/subnets', parameters('Network'), parameters('Subnet'))]"
          },
          "networkSecurityGroupID": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'firewall'), '2022-09-01').outputs.Id.value]"
          },
          "osVersion": {
            "value": "[parameters('OSVersion')]"
          },
          "cloudInitData": {
            "value": "[base64(format(variables('$fxv#0'), base64(format(variables('$fxv#1'), variables('registry'), variables('workspaceRepository'), parameters('AiUnlimitedVersion'), parameters('AiUnlimitedAuthPort'), parameters('AiUnlimitedGrpcPort'), subscription().subscriptionId, subscription().tenantId, format('--network-alias {0}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'loadbalancer'), '2022-09-01').outputs.PublicDns.value))), base64(format(variables('$fxv#2'), variables('registry'), variables('jupyterRepository'), parameters('JupyterVersion'), parameters('JupyterHttpPort'), parameters('JupyterToken'))), base64(format(variables('$fxv#3'), variables('registry'), variables('workspaceSchedulerRepository'), variables('AiUnlimitedSchedulerVersion'), variables('AiUnlimitedSchedulerHttpPort'))), base64(format(variables('$fxv#4'), variables('registry'), variables('workspaceUIRepository'), parameters('AiUnlimitedUIVersion'), variables('AiUnlimitedUIHttpPort'), parameters('AiUnlimitedAuthPort'), parameters('AiUnlimitedGrpcPort'), format('--network-alias {0}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'loadbalancer'), '2022-09-01').outputs.PublicDns.value)))))]"
          },
          "usePersistentVolume": {
            "value": "[parameters('UsePersistentVolume')]"
          },
          "persistentVolumeSize": {
            "value": "[parameters('PersistentVolumeSize')]"
          },
          "existingPersistentVolume": {
            "value": "[parameters('ExistingPersistentVolume')]"
          },
          "nlbName": {
            "value": "[parameters('AiUnlimitedName')]"
          },
          "nlbPoolNames": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'loadbalancer'), '2022-09-01').outputs.nlbPools.value]"
          },
          "usePublicIp": {
            "value": false
          },
          "tags": {
            "value": "[parameters('Tags')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "13207593080095673481"
            }
          },
          "parameters": {
            "location": {
              "type": "string"
            },
            "name": {
              "type": "string"
            },
            "adminUsername": {
              "type": "string"
            },
            "sshPublicKey": {
              "type": "string"
            },
            "vmSize": {
              "type": "string"
            },
            "subnetId": {
              "type": "string"
            },
            "networkSecurityGroupID": {
              "type": "string"
            },
            "osVersion": {
              "type": "string"
            },
            "usePersistentVolume": {
              "type": "string"
            },
            "persistentVolumeSize": {
              "type": "int"
            },
            "existingPersistentVolume": {
              "type": "string"
            },
            "cloudInitData": {
              "type": "string"
            },
            "usePublicIp": {
              "type": "bool",
              "defaultValue": false
            },
            "nlbName": {
              "type": "string",
              "defaultValue": ""
            },
            "albName": {
              "type": "string",
              "defaultValue": ""
            },
            "nlbPoolNames": {
              "type": "array",
              "defaultValue": []
            },
            "tags": {
              "type": "object",
              "defaultValue": {}
            },
            "dnsLabelPrefix": {
              "type": "string",
              "defaultValue": ""
            }
          },
          "variables": {
            "copy": [
              {
                "name": "resourcePools",
                "count": "[length(parameters('nlbPoolNames'))]",
                "input": {
                  "id": "[resourceId('Microsoft.Network/loadBalancers/backendAddressPools', parameters('nlbName'), parameters('nlbPoolNames')[copyIndex('resourcePools')])]"
                }
              }
            ],
            "imageReference": {
              "Ubuntu-1804": {
                "publisher": "Canonical",
                "offer": "UbuntuServer",
                "sku": "18_04-lts-gen2",
                "version": "latest"
              },
              "Ubuntu-2004": {
                "publisher": "Canonical",
                "offer": "0001-com-ubuntu-server-focal",
                "sku": "20_04-lts-gen2",
                "version": "latest"
              },
              "Ubuntu-2204": {
                "publisher": "Canonical",
                "offer": "0001-com-ubuntu-server-jammy",
                "sku": "22_04-lts-gen2",
                "version": "latest"
              }
            },
            "publicIPAddressName": "[format('{0}PublicIP', parameters('name'))]",
            "networkInterfaceName": "[format('{0}-nic', parameters('name'))]",
            "osDiskType": "Standard_LRS",
            "linuxConfiguration": {
              "disablePasswordAuthentication": true,
              "ssh": {
                "publicKeys": [
                  {
                    "path": "[format('/home/{0}/.ssh/authorized_keys', parameters('adminUsername'))]",
                    "keyData": "[parameters('sshPublicKey')]"
                  }
                ]
              }
            },
            "trustedExtensionName": "GuestAttestation",
            "trustedExtensionPublisher": "Microsoft.Azure.Security.LinuxAttestation",
            "trustedExtensionVersion": "1.0",
            "trustedMaaTenantName": "GuestAttestation",
            "trustedMaaEndpoint": "[substring('emptystring', 0, 0)]",
            "dockerExtensionName": "DockerExtension",
            "dockerExtensionPublisher": "Microsoft.Azure.Extensions",
            "dockerExtensionVersion": "1.1"
          },
          "resources": [
            {
              "condition": "[equals(parameters('usePersistentVolume'), 'New')]",
              "type": "Microsoft.Compute/disks",
              "apiVersion": "2023-04-02",
              "name": "[format('{0}-disk', parameters('name'))]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "creationData": {
                  "createOption": "Empty"
                },
                "diskSizeGB": "[parameters('persistentVolumeSize')]",
                "maxShares": 1,
                "osType": "Linux"
              }
            },
            {
              "type": "Microsoft.Network/networkInterfaces",
              "apiVersion": "2022-11-01",
              "name": "[variables('networkInterfaceName')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "properties": {
                "ipConfigurations": [
                  "[if(parameters('usePublicIp'), createObject('name', 'ipconfigpublic', 'properties', createObject('privateIPAllocationMethod', 'Dynamic', 'subnet', createObject('id', parameters('subnetId')), 'publicIPAddress', createObject('id', reference(resourceId('Microsoft.Resources/deployments', variables('publicIPAddressName')), '2022-09-01').outputs.Id.value), 'loadBalancerBackendAddressPools', variables('resourcePools'))), if(equals(parameters('albName'), ''), createObject('name', 'ipconfigprivate', 'properties', createObject('privateIPAllocationMethod', 'Dynamic', 'subnet', createObject('id', parameters('subnetId')), 'loadBalancerBackendAddressPools', variables('resourcePools'))), createObject('name', 'ipconfigprivate', 'properties', createObject('privateIPAllocationMethod', 'Dynamic', 'subnet', createObject('id', parameters('subnetId'))))))]"
                ],
                "networkSecurityGroup": {
                  "id": "[parameters('networkSecurityGroupID')]"
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deployments', variables('publicIPAddressName'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines",
              "apiVersion": "2023-03-01",
              "name": "[parameters('name')]",
              "location": "[parameters('location')]",
              "tags": "[parameters('tags')]",
              "identity": {
                "type": "SystemAssigned"
              },
              "properties": {
                "hardwareProfile": {
                  "vmSize": "[parameters('vmSize')]"
                },
                "storageProfile": {
                  "osDisk": {
                    "createOption": "FromImage",
                    "managedDisk": {
                      "storageAccountType": "[variables('osDiskType')]"
                    }
                  },
                  "dataDisks": [
                    {
                      "lun": 0,
                      "createOption": "Attach",
                      "managedDisk": {
                        "id": "[if(equals(parameters('usePersistentVolume'), 'New'), resourceId('Microsoft.Compute/disks', format('{0}-disk', parameters('name'))), resourceId('Microsoft.Compute/disks', parameters('existingPersistentVolume')))]"
                      }
                    }
                  ],
                  "imageReference": "[variables('imageReference')[parameters('osVersion')]]"
                },
                "networkProfile": {
                  "networkInterfaces": [
                    {
                      "id": "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]"
                    }
                  ]
                },
                "osProfile": {
                  "computerName": "[parameters('name')]",
                  "adminUsername": "[parameters('adminUsername')]",
                  "linuxConfiguration": "[variables('linuxConfiguration')]"
                },
                "securityProfile": {
                  "securityType": "TrustedLaunch",
                  "uefiSettings": {
                    "secureBootEnabled": true,
                    "vTpmEnabled": true
                  }
                },
                "userData": "[parameters('cloudInitData')]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName'))]",
                "[resourceId('Microsoft.Compute/disks', format('{0}-disk', parameters('name')))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('name'), variables('trustedExtensionName'))]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[variables('trustedExtensionPublisher')]",
                "type": "[variables('trustedExtensionName')]",
                "typeHandlerVersion": "[variables('trustedExtensionVersion')]",
                "autoUpgradeMinorVersion": true,
                "settings": {
                  "AttestationConfig": {
                    "MaaSettings": {
                      "maaEndpoint": "[variables('trustedMaaEndpoint')]",
                      "maaTenantName": "[variables('trustedMaaTenantName')]"
                    }
                  }
                }
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "type": "Microsoft.Compute/virtualMachines/extensions",
              "apiVersion": "2023-03-01",
              "name": "[format('{0}/{1}', parameters('name'), variables('dockerExtensionName'))]",
              "tags": "[parameters('tags')]",
              "location": "[parameters('location')]",
              "properties": {
                "publisher": "[variables('dockerExtensionPublisher')]",
                "type": "[variables('dockerExtensionName')]",
                "typeHandlerVersion": "[variables('dockerExtensionVersion')]",
                "autoUpgradeMinorVersion": true
              },
              "dependsOn": [
                "[resourceId('Microsoft.Compute/virtualMachines', parameters('name'))]"
              ]
            },
            {
              "condition": "[parameters('usePublicIp')]",
              "type": "Microsoft.Resources/deployments",
              "apiVersion": "2022-09-01",
              "name": "[variables('publicIPAddressName')]",
              "properties": {
                "expressionEvaluationOptions": {
                  "scope": "inner"
                },
                "mode": "Incremental",
                "parameters": {
                  "name": {
                    "value": "[variables('publicIPAddressName')]"
                  },
                  "location": {
                    "value": "[parameters('location')]"
                  },
                  "dnsPrefix": {
                    "value": "[parameters('dnsLabelPrefix')]"
                  },
                  "tags": {
                    "value": "[parameters('tags')]"
                  }
                },
                "template": {
                  "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
                  "contentVersion": "1.0.0.0",
                  "metadata": {
                    "_generator": {
                      "name": "bicep",
                      "version": "0.29.47.4906",
                      "templateHash": "11278674213062453956"
                    }
                  },
                  "parameters": {
                    "name": {
                      "type": "string"
                    },
                    "location": {
                      "type": "string"
                    },
                    "dnsPrefix": {
                      "type": "string"
                    },
                    "tags": {
                      "type": "object"
                    }
                  },
                  "resources": [
                    {
                      "type": "Microsoft.Network/publicIPAddresses",
                      "apiVersion": "2021-05-01",
                      "name": "[parameters('name')]",
                      "location": "[parameters('location')]",
                      "sku": {
                        "name": "Standard"
                      },
                      "properties": {
                        "dnsSettings": "[if(not(equals(parameters('dnsPrefix'), '')), createObject('domainNameLabel', parameters('dnsPrefix')), null())]",
                        "publicIPAddressVersion": "IPv4",
                        "publicIPAllocationMethod": "Static",
                        "idleTimeoutInMinutes": 5
                      },
                      "tags": "[parameters('tags')]"
                    }
                  ],
                  "outputs": {
                    "Id": {
                      "type": "string",
                      "value": "[resourceId('Microsoft.Network/publicIPAddresses', parameters('name'))]"
                    },
                    "Ip": {
                      "type": "string",
                      "value": "[reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-05-01').ipAddress]"
                    },
                    "Dns": {
                      "type": "string",
                      "value": "[if(not(equals(parameters('dnsPrefix'), '')), reference(resourceId('Microsoft.Network/publicIPAddresses', parameters('name')), '2021-05-01').dnsSettings.fqdn, '')]"
                    }
                  }
                }
              }
            }
          ],
          "outputs": {
            "PublicIP": {
              "type": "string",
              "value": "[if(parameters('usePublicIp'), reference(resourceId('Microsoft.Resources/deployments', variables('publicIPAddressName')), '2022-09-01').outputs.Ip.value, '')]"
            },
            "PrivateIP": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Network/networkInterfaces', variables('networkInterfaceName')), '2022-11-01').ipConfigurations[0].properties.privateIPAddress]"
            },
            "PrincipleId": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Compute/virtualMachines', parameters('name')), '2023-03-01', 'full').identity.principalId]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'firewall')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'loadbalancer')]",
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'Public-Key')]"
      ]
    },
    {
      "type": "Microsoft.Resources/deployments",
      "apiVersion": "2022-09-01",
      "name": "Public-Key",
      "resourceGroup": "[parameters('ResourceGroupName')]",
      "properties": {
        "expressionEvaluationOptions": {
          "scope": "inner"
        },
        "mode": "Incremental",
        "parameters": {
          "Name": {
            "value": "[parameters('AiUnlimitedName')]"
          },
          "Location": {
            "value": "[deployment().location]"
          },
          "VaultName": {
            "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'vault'), '2022-09-01').outputs.name.value]"
          },
          "RoleID": {
            "value": "[parameters('RoleDefinitionId')]"
          }
        },
        "template": {
          "$schema": "https://schema.management.azure.com/schemas/2019-04-01/deploymentTemplate.json#",
          "contentVersion": "1.0.0.0",
          "metadata": {
            "_generator": {
              "name": "bicep",
              "version": "0.29.47.4906",
              "templateHash": "2861565763492996333"
            }
          },
          "parameters": {
            "Location": {
              "type": "string"
            },
            "Name": {
              "type": "string"
            },
            "VaultName": {
              "type": "string"
            },
            "RoleID": {
              "type": "string"
            },
            "Uuid": {
              "type": "string",
              "defaultValue": "[newGuid()]"
            }
          },
          "variables": {
            "SecretName": "[format('{0}-PrivateKey', parameters('Name'))]",
            "ScriptName": "[format('{0}-createKeys', parameters('Name'))]",
            "IdentityName": "[format('{0}-scratch', parameters('Name'))]",
            "RoleDefinitionId": "[resourceId('Microsoft.Authorization/roleDefinitions', parameters('RoleID'))]",
            "RoleDefinitionName": "[guid(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('IdentityName')), variables('RoleDefinitionId'), resourceGroup().id)]"
          },
          "resources": [
            {
              "type": "Microsoft.ManagedIdentity/userAssignedIdentities",
              "apiVersion": "2023-01-31",
              "name": "[variables('IdentityName')]",
              "location": "[parameters('Location')]"
            },
            {
              "type": "Microsoft.Authorization/roleAssignments",
              "apiVersion": "2022-04-01",
              "name": "[variables('RoleDefinitionName')]",
              "properties": {
                "roleDefinitionId": "[variables('RoleDefinitionId')]",
                "principalId": "[reference(resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('IdentityName')), '2023-01-31').principalId]",
                "principalType": "ServicePrincipal"
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('IdentityName'))]"
              ]
            },
            {
              "type": "Microsoft.Resources/deploymentScripts",
              "apiVersion": "2023-08-01",
              "name": "[variables('ScriptName')]",
              "location": "[parameters('Location')]",
              "identity": {
                "type": "UserAssigned",
                "userAssignedIdentities": {
                  "[format('{0}', resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('IdentityName')))]": {}
                }
              },
              "kind": "AzureCLI",
              "properties": {
                "forceUpdateTag": "[parameters('Uuid')]",
                "azCliVersion": "2.0.80",
                "timeout": "PT30M",
                "retentionInterval": "P1D",
                "cleanupPreference": "OnSuccess",
                "scriptContent": "      #/bin/bash -e\n\n      echo -e 'y' | ssh-keygen -f scratch\n\n      privateKey=$(cat scratch)\n      publicKey=$(cat 'scratch.pub')\n\n      json=\"{\\\"keyinfo\\\":{\\\"privateKey\\\":\\\"$privateKey\\\",\\\"publicKey\\\":\\\"$publicKey\\\"}}\"\n\n      echo \"$json\" > $AZ_SCRIPTS_OUTPUT_PATH\n    "
              },
              "dependsOn": [
                "[resourceId('Microsoft.ManagedIdentity/userAssignedIdentities', variables('IdentityName'))]",
                "[resourceId('Microsoft.Authorization/roleAssignments', variables('RoleDefinitionName'))]"
              ]
            },
            {
              "type": "Microsoft.KeyVault/vaults/secrets",
              "apiVersion": "2023-07-01",
              "name": "[format('{0}/{1}', parameters('VaultName'), variables('SecretName'))]",
              "properties": {
                "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', variables('ScriptName')), '2023-08-01').outputs.keyinfo.privateKey]"
              },
              "dependsOn": [
                "[resourceId('Microsoft.Resources/deploymentScripts', variables('ScriptName'))]"
              ]
            }
          ],
          "outputs": {
            "PublicKey": {
              "type": "string",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', variables('ScriptName')), '2023-08-01').outputs.keyinfo.publicKey]"
            },
            "Status": {
              "type": "object",
              "value": "[reference(resourceId('Microsoft.Resources/deploymentScripts', variables('ScriptName')), '2023-08-01').status]"
            }
          }
        }
      },
      "dependsOn": [
        "[extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'vault')]"
      ]
    }
  ],
  "outputs": {
    "PublicIP": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'loadbalancer'), '2022-09-01').outputs.PublicIp.value]"
    },
    "PrivateIP": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'ai-unlimited'), '2022-09-01').outputs.PrivateIP.value]"
    },
    "AiUnlimitedPublicHttpAccess": {
      "type": "string",
      "value": "[concat(format('http://{0}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'loadbalancer'), '2022-09-01').outputs.PublicDns.value), if(not(equals(variables('AiUnlimitedUIHttpPort'), 80)), concat(':', string(variables('AiUnlimitedUIHttpPort'))), ''))]"
    },
    "AiUnlimitedPrivateHttpAccess": {
      "type": "string",
      "value": "[concat(format('http://{0}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'ai-unlimited'), '2022-09-01').outputs.PrivateIP.value), if(not(equals(variables('AiUnlimitedUIHttpPort'), 80)), concat(':', string(variables('AiUnlimitedUIHttpPort'))), ''))]"
    },
    "AiUnlimitedPublicGrpcAccess": {
      "type": "string",
      "value": "[format('http://{0}:{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'loadbalancer'), '2022-09-01').outputs.PublicDns.value, parameters('AiUnlimitedGrpcPort'))]"
    },
    "AiUnlimitedPrivateGrpcAccess": {
      "type": "string",
      "value": "[format('http://{0}:{1}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'ai-unlimited'), '2022-09-01').outputs.PrivateIP.value, parameters('AiUnlimitedGrpcPort'))]"
    },
    "JupyterLabPublicHttpAccess": {
      "type": "string",
      "value": "[format('http://{0}:{1}?token={2}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'loadbalancer'), '2022-09-01').outputs.PublicDns.value, parameters('JupyterHttpPort'), parameters('JupyterToken'))]"
    },
    "JupyterLabPrivateHttpAccess": {
      "type": "string",
      "value": "[format('http://{0}:{1}?token={2}', reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'ai-unlimited'), '2022-09-01').outputs.PrivateIP.value, parameters('JupyterHttpPort'), parameters('JupyterToken'))]"
    },
    "SecurityGroup": {
      "type": "string",
      "value": "[reference(extensionResourceId(format('/subscriptions/{0}/resourceGroups/{1}', subscription().subscriptionId, parameters('ResourceGroupName')), 'Microsoft.Resources/deployments', 'firewall'), '2022-09-01').outputs.Id.value]"
    }
  }
}