AWSTemplateFormatVersion: "2010-09-09"

Description: 'AWS CloudFormation Template AI Unlimited: AI Unlimited is a instance based service for deploying and suspending clusters of AI Unlimited compute engines, and managing project lifecycles.  Note: You will be billed for the AWS resources used if you create a stack from this template.'

Metadata:
  AWS::CloudFormation::Interface:
    ParameterGroups:
      - Label:
          default: AI Unlimited
        Parameters:
          - AiUnlimitedName
          - InstanceType
          - RootVolumeSize
          - TerminationProtection
          - IamRole
          - IamRoleName
          - IamPermissionsBoundary
      - Label:
          default: AI Unlimited connection
        Parameters:
          - AvailabilityZone
          - Private
          - Session
          - Vpc
          - Subnet
          - KeyName
          - AccessCIDR
          - PrefixList
          - SecurityGroup
          - AiUnlimitedHttpPort
          - AiUnlimitedGrpcPort
          - AiUnlimitedVersion
          - AiUnlimitedSchedulerVersion
          - AiUnlimitedSchedulerHttpPort
          - AiUnlimitedSchedulerGrpcPort
      - Label:
          default: Persistent volume
        Parameters:
          - UsePersistentVolume
          - PersistentVolumeSize
          - ExistingPersistentVolumeId
          - PersistentVolumeDeletionPolicy

Parameters:
  LatestAmiId:
    Type: AWS::SSM::Parameter::Value<AWS::EC2::Image::Id>
    Default: /aws/service/ami-amazon-linux-latest/al2023-ami-kernel-default-x86_64

  AiUnlimitedName:
    Description: The AI Unlimited instance name
    Type: String
    Default: ai-unlimited
    AllowedPattern: ^[a-zA-Z][a-zA-Z0-9-]*
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
    MaxLength: "20"
    MinLength: "1"

  Private:
    Description: Will AI Unlimited be deployed in a private network without public IPs?
    Type: String
    AllowedValues:
      - true
      - false
    Default: false

  Session:
    Description: Should AI Unlimited be accessible via AWS Session Manager?
    Type: String
    AllowedValues:
      - true
      - false
    Default: false

  Vpc:
    Description: Network to deploy the AI Unlimited to.
    Type: AWS::EC2::VPC::Id
    ConstraintDescription: must be the name of an existing vpc.

  Subnet:
    Description: Subnetwork to deploy the AI Unlimited to.
    Type: AWS::EC2::Subnet::Id
    ConstraintDescription: must be the name of a existing subnet.

  AvailabilityZone:
    Description: "Availability zone to deploy the AI Unlimited to.\nThis must match the subnet, the zone of any pre existing volumes if used, \nand the instance type must be available in the selected zone.\n"
    Type: AWS::EC2::AvailabilityZone::Name
    ConstraintDescription: must be the name of a existing subnet.

  AiUnlimitedHttpPort:
    Description: port to access the AI Unlimited UI.
    Type: Number
    Default: 3000
    ConstraintDescription: must be a valid ununsed port between 0 and 65535.
    MinValue: 0
    MaxValue: 65535

  AiUnlimitedGrpcPort:
    Description: port to access the AI Unlimited API.
    Type: Number
    Default: 3282
    ConstraintDescription: must be a valid ununsed port between 0 and 65535.
    MinValue: 0
    MaxValue: 65535

  AiUnlimitedSchedulerHttpPort:
    Description: port to access the AI Unlimited Scheduler API.
    Type: Number
    Default: 50061
    ConstraintDescription: must be a valid ununsed port between 0 and 65535.
    MinValue: 0
    MaxValue: 65535

  AiUnlimitedSchedulerGrpcPort:
    Description: port to access the AI Unlimited Scheduler API.
    Type: Number
    Default: 50051
    ConstraintDescription: must be a valid ununsed port between 0 and 65535.
    MinValue: 0
    MaxValue: 65535

  AiUnlimitedVersion:
    Description: Which version of AI Unlimited to deploy, uses container version tags, defaults to "latest"
    Type: String
    Default: v0.2.23

  AiUnlimitedSchedulerVersion:
    Description: Which version of AI Unlimited Scheduler to deploy, uses container version tags, defaults to "latest"
    Type: String
    Default: latest

  RootVolumeSize:
    Description: size of the root disk to the AI Unlimited server.
    Type: Number
    Default: 20
    ConstraintDescription: Size in GB, between 10 and 1000.
    MinValue: 8
    MaxValue: 1000

  UsePersistentVolume:
    Description: Should we use a new or existing volume for persistent data on the AI Unlimited server.
    Type: String
    AllowedValues:
      - New
      - Existing
    Default: New
    ConstraintDescription: Specify if you are using a a new persistent volume, an existing one, or none.

  PersistentVolumeSize:
    Description: size of the optional persistent disk to the AI Unlimited server.
    Type: Number
    Default: 20
    ConstraintDescription: Size in GB, between 10 and 1000.
    MinValue: 8
    MaxValue: 1000

  ExistingPersistentVolumeId:
    Description: Id of the existing persistent volume to attach. Must be int the same availability zone as the AI Unlimited instance.
    Type: String
    Default: None

  PersistentVolumeDeletionPolicy:
    Description: Behavior for the Persistent Volume when deleting the cloudformations deployment.
    Type: String
    AllowedValues:
      - Delete
      - Retain
      - RetainExceptOnCreate
      - Snapshot
    Default: Retain

  TerminationProtection:
    Description: Enable instance termination protection.
    Type: String
    AllowedValues:
      - true
      - false
    Default: false

  InstanceType:
    Description: AI Unlimited EC2 instance type
    Type: String
    AllowedValues:
      - t3.nano
      - t3.micro
      - t3.small
      - t3.medium
      - t3.large
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - c4.large
      - c4.xlarge
      - c4.2xlarge
      - c4.4xlarge
      - c4.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge
    Default: t3.micro
    ConstraintDescription: must be a valid EC2 instance type.

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the AI Unlimited instance, leave empty if no ssh keys should be included
    Type: String

  IamRole:
    Description: |
      Create a new IAM role for AI Unlimited or use an exiting one.
      Requires CAPABILITY_IAM if creating a new IAM Role
    Type: String
    AllowedValues:
      - New
      - Existing
    Default: New

  IamRoleName:
    Description: |
      Name of an existing IAM Role to assign to AI Unlimited,
      or the name to give to the newly created role.
      Leave blank to use an autogenerated name.
      Requires CAPABILITY_NAMED_IAM if naming a new IAM Role.
    Type: String

  IamPermissionsBoundary:
    Description: |
      Optional: Arn of a permissions boundary to pass to the IAM Role assigned to AI Unlimited.
    Type: String

  AccessCIDR:
    Description: The IP address range that can be used to communicate with the AI Unlimited instance.
    Type: String
    AllowedPattern: ((\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})\/(\d{1,2}))|^$
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  PrefixList:
    Description: The PrefixList that can be used to communicate with the AI Unlimited instance.
    Type: String
    ConstraintDescription: must be a valid prefixlist

  SecurityGroup:
    Description: The SecurityGroup that can be used to communicate with the AI Unlimited instance.
    Type: String
    ConstraintDescription: must be a valid securityGroup ID

Rules:
  subnetsInVpc:
    Assertions:
      - Assert:
          Fn::EachMemberEquals:
            - Fn::ValueOfAll:
                - AWS::EC2::Subnet::Id
                - VpcId
            - !Ref Vpc
        AssertDescription: The subnet you selected is not in the VPC

  instanceTypeInZone:
    Assertions:
      - Assert:
          Fn::EachMemberEquals:
            - Fn::ValueOfAll:
                - AWS::EC2::Subnet::Id
                - VpcId
            - !Ref Vpc
        AssertDescription: The subnet you selected is not in the VPC

Conditions:
  NEEDSROLE: !Equals
    - !Ref IamRole
    - New

  HASPUBLICIP: !Not
    - !Equals
      - !Ref Private
      - "true"

  HASKEY: !Not
    - !Equals
      - !Ref KeyName
      - ""

  HASCIDR: !Not
    - !Equals
      - !Ref AccessCIDR
      - ""

  HASPREFIXLIST: !Not
    - !Equals
      - !Ref PrefixList
      - ""

  HASSECURITYGROUP: !Not
    - !Equals
      - !Ref SecurityGroup
      - ""

  HASCIDRORPREFIXLIST: !Or
    - !Condition HASCIDR
    - !Condition HASPREFIXLIST

  HASCIDRORPREFIXLISTORSECGROUP: !Or
    - !Condition HASCIDR
    - !Condition HASPREFIXLIST
    - !Condition HASSECURITYGROUP

  USESESSIONMANAGER: !Equals
    - !Ref Session
    - "true"

  NEEDSROLEANDSESSIONMANAGER: !And
    - !Condition NEEDSROLE
    - !Condition USESESSIONMANAGER

  HASKEYANDPUBLIC: !And
    - !Condition HASKEY
    - !Condition HASPUBLICIP

  HASKEYANDCIDRORPREFIXLISTORSECGROUP: !And
    - !Condition HASKEY
    - !Condition HASCIDRORPREFIXLISTORSECGROUP

  USENEWPERSISTENTVOLUME: !Equals
    - !Ref UsePersistentVolume
    - New

  HASIAMPERMISSIONSBOUNDARY: !Not
    - !Equals
      - !Ref IamPermissionsBoundary
      - ""

  HASIAMROLENAME: !Not
    - !Equals
      - !Ref IamRoleName
      - ""

Resources:
  AiUnlimitedVolume:
    DeletionPolicy: !Ref PersistentVolumeDeletionPolicy
    Type: AWS::EC2::Volume
    Properties:
      AvailabilityZone: !Ref AvailabilityZone
      Size: !Ref PersistentVolumeSize
      Encrypted: true
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref AiUnlimitedName
              - !Select
                - 4
                - !Split
                  - '-'
                  - !Select
                    - 2
                    - !Split
                      - /
                      - !Ref AWS::StackId
        - Key: Usage
          Value: persistent storage
    Condition: USENEWPERSISTENTVOLUME

  AiUnlimitedServer:
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    Type: AWS::EC2::Instance
    Metadata:
      AWS::CloudFormation::Init:
        configSets:
          ai_unlimited_install:
            - prepare_directory
            - !If
              - USENEWPERSISTENTVOLUME
              - prepare_new_storage
              - !Ref AWS::NoValue
            - bind_storage
            - mount_storage
            - install_docker
            - configure_ai_unlimited_service
            - start_ai_unlimited_service
            - configure_ai_unlimited_scheduler_service
            - start_ai_unlimited_scheduler_service
        prepare_directory:
          commands:
            mkdir:
              command: !Sub |
                #!/bin/bash -xe
                mkdir -p /etc/td
        prepare_new_storage:
          commands:
            mkfs:
              command: !Sub |
                #!/bin/bash -xe
                /usr/sbin/mkfs -t ext4 /dev/nvme1n1
        bind_storage:
          commands:
            fstab:
              command: !Sub |
                #!/bin/bash -xe
                /usr/bin/echo "/dev/nvme1n1 /etc/td ext4 defaults 0 2" >> /etc/fstab
        mount_storage:
          commands:
            mount:
              command: !Sub |
                #!/bin/bash -xe
                /usr/bin/mount -a
        install_docker:
          files:
            /usr/lib/systemd/system/docker-install.service:
              content: !Sub |
                [Unit]
                Description=Install docker

                [Service]
                Type=oneshot
                ExecStart=/bin/bash -c "while ! dnf update; do sleep 2; done && while ! dnf install -y docker; do sleep 2; done"
                RemainAfterExit=yes

                [Install]
                WantedBy=multi-user.target
          commands:
            verify_docker:
              command: !Sub |
                #!/bin/bash -xe
                systemctl start docker-install
                systemctl start docker
                systemctl enable docker
          services:
            systemd:
              docker:
                enabled: "true"
                ensureRunning: "true"
        configure_ai_unlimited_service:
          files:
            /usr/lib/systemd/system/ai-unlimited.service:
              content: !Sub |
                [Unit]
                Description=AI Unlimited
                After=docker.service
                Requires=docker.service
                StartLimitInterval=200
                StartLimitBurst=10

                [Service]
                TimeoutStartSec=0
                Restart=always
                RestartSec=2
                ExecStartPre=-/usr/bin/mkdir -p /etc/td/ai-unlimited
                ExecStartPre=-/usr/bin/docker exec %n stop || true
                ExecStartPre=-/usr/bin/docker rm %n || true
                ExecStartPre=-/bin/bash -c '/usr/bin/docker network create -d bridge ai_unlimited || true'
                ExecStartPre=/usr/bin/docker pull teradata/ai-unlimited-workspaces:${ AiUnlimitedVersion }
                ExecStart=/usr/bin/docker run \
                    -e accept_license=Y \
                    -e PLATFORM=aws \
                    -v /etc/td/ai-unlimited:/etc/td \
                    -p ${ AiUnlimitedHttpPort }:3000 \
                    -p ${ AiUnlimitedGrpcPort }:3282 \
                    --network ai_unlimited \
                    --rm --name %n teradata/ai-unlimited-workspaces:${ AiUnlimitedVersion } workspaces serve -v

                [Install]
                WantedBy=multi-user.target
              group: root
              mode: "000400"
              owner: root
        start_ai_unlimited_service:
          services:
            systemd:
              ai-unlimited:
                enabled: "true"
                ensureRunning: "true"
        configure_ai_unlimited_scheduler_service:
          files:
            /usr/lib/systemd/system/ai-unlimited-scheduler.service:
              content: !Sub |
                [Unit]
                Description=AI Unlimited Scheduler
                After=docker.service
                Requires=docker.service
                StartLimitInterval=200
                StartLimitBurst=10

                [Service]
                TimeoutStartSec=0
                Restart=always
                RestartSec=2
                ExecStartPre=-/usr/bin/docker exec %n stop || true
                ExecStartPre=-/usr/bin/docker rm %n || true
                ExecStartPre=/usr/bin/docker pull teradata/ai-unlimited-scheduler:latest
                ExecStart=/usr/bin/docker run \
                    --network ai_unlimited \
                    -p ${ AiUnlimitedSchedulerGrpcPort }:50051 \
                    -p ${ AiUnlimitedSchedulerHttpPort }:50061 \
                    -v /etc/td/ai-unlimited:/etc/td \
                    -e TD_WSSCHED_LOG_PATH=/etc/td/workspaces/scheduler_logs \
                    -e TD_WSSCHED_TASK_LOG_PATH=/etc/td/workspaces/scheduler_logs/projects \
                    -e TD_WSSCHED_POL_INTERVAL=60 \
                    -e TD_WS_CONTAINER_NAME=ai-unlimited.service \
                    --rm --name %n teradata/ai-unlimited-scheduler:latest workspace-event-scheduler serve

                [Install]
                WantedBy=multi-user.target
              group: root
              mode: "000400"
              owner: root
        start_ai_unlimited_scheduler_service:
          services:
            systemd:
              ai-unlimited-scheduler:
                enabled: "true"
                ensureRunning: "true"
    Properties:
      PropagateTagsToVolumeOnCreation: true
      BlockDeviceMappings:
        - DeviceName: /dev/xvda
          Ebs:
            VolumeSize: !Ref RootVolumeSize
            Encrypted: true
      NetworkInterfaces:
        - DeviceIndex: 0
          SubnetId: !Ref Subnet
          GroupSet:
            - !GetAtt AiUnlimitedSecurityGroup.GroupId
            - !GetAtt AiUnlimitedSchedulerSecurityGroup.GroupId
          AssociatePublicIpAddress: !If
            - HASPUBLICIP
            - true
            - !Ref AWS::NoValue
      ImageId: !Ref LatestAmiId
      InstanceType: !Ref InstanceType
      KeyName: !If
        - HASKEY
        - !Ref KeyName
        - !Ref AWS::NoValue
      DisableApiTermination: !Ref TerminationProtection
      IamInstanceProfile: !Ref AiUnlimitedInstanceProfile
      Volumes:
        - Device: /dev/xvdb
          VolumeId: !If
            - USENEWPERSISTENTVOLUME
            - !Ref AiUnlimitedVolume
            - !Ref ExistingPersistentVolumeId
      Tags:
        - Key: Name
          Value: !Join
            - '-'
            - - !Ref AiUnlimitedName
              - !Select
                - 4
                - !Split
                  - '-'
                  - !Select
                    - 2
                    - !Split
                      - /
                      - !Ref AWS::StackId
      UserData: !Base64
        Fn::Sub: |
          #!/bin/bash -xe
          yum update -y
          yum update -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackId} --resource AiUnlimitedServer --configsets ai_unlimited_install --region ${AWS::Region}
          /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackId} --resource AiUnlimitedServer --region ${AWS::Region}

  AiUnlimitedSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Enable access to AI Unlimited server over http and grpc
      SecurityGroupIngress:
        - FromPort: !Ref AiUnlimitedHttpPort
          IpProtocol: tcp
          ToPort: !Ref AiUnlimitedHttpPort
          CidrIp: !If
            - HASCIDR
            - !Ref AccessCIDR
            - !Ref AWS::NoValue
          SourcePrefixListId: !If
            - HASPREFIXLIST
            - !Ref PrefixList
            - !Ref AWS::NoValue
          SourceSecurityGroupId: !If
            - HASSECURITYGROUP
            - !Ref SecurityGroup
            - !Ref AWS::NoValue
        - FromPort: !Ref AiUnlimitedGrpcPort
          IpProtocol: tcp
          ToPort: !Ref AiUnlimitedGrpcPort
          CidrIp: !If
            - HASCIDR
            - !Ref AccessCIDR
            - !Ref AWS::NoValue
          SourcePrefixListId: !If
            - HASPREFIXLIST
            - !Ref PrefixList
            - !Ref AWS::NoValue
          SourceSecurityGroupId: !If
            - HASSECURITYGROUP
            - !Ref SecurityGroup
            - !Ref AWS::NoValue

  AiUnlimitedSchedulerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref Vpc
      GroupDescription: Enable access to AI Unlimited server over http and grpc
      SecurityGroupIngress:
        - FromPort: !Ref AiUnlimitedSchedulerHttpPort
          IpProtocol: tcp
          ToPort: !Ref AiUnlimitedSchedulerHttpPort
          CidrIp: !If
            - HASCIDR
            - !Ref AccessCIDR
            - !Ref AWS::NoValue
          SourcePrefixListId: !If
            - HASPREFIXLIST
            - !Ref PrefixList
            - !Ref AWS::NoValue
          SourceSecurityGroupId: !If
            - HASSECURITYGROUP
            - !Ref SecurityGroup
            - !Ref AWS::NoValue
        - FromPort: !Ref AiUnlimitedSchedulerGrpcPort
          IpProtocol: tcp
          ToPort: !Ref AiUnlimitedSchedulerGrpcPort
          CidrIp: !If
            - HASCIDR
            - !Ref AccessCIDR
            - !Ref AWS::NoValue
          SourcePrefixListId: !If
            - HASPREFIXLIST
            - !Ref PrefixList
            - !Ref AWS::NoValue
          SourceSecurityGroupId: !If
            - HASSECURITYGROUP
            - !Ref SecurityGroup
            - !Ref AWS::NoValue

  SecurityGroupIngress:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !GetAtt AiUnlimitedSecurityGroup.GroupId
      FromPort: 22
      IpProtocol: tcp
      ToPort: 22
      CidrIp: !If
        - HASCIDR
        - !Ref AccessCIDR
        - !Ref AWS::NoValue
      SourcePrefixListId: !If
        - HASPREFIXLIST
        - !Ref PrefixList
        - !Ref AWS::NoValue
      SourceSecurityGroupId: !If
        - HASSECURITYGROUP
        - !Ref SecurityGroup
        - !Ref AWS::NoValue
    Condition: HASKEYANDCIDRORPREFIXLISTORSECGROUP

  AiUnlimitedRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      Path: /
      RoleName: !If
        - HASIAMROLENAME
        - !Ref IamRoleName
        - !Ref AWS::NoValue
      PermissionsBoundary: !If
        - HASIAMPERMISSIONSBOUNDARY
        - !Ref IamPermissionsBoundary
        - !Ref AWS::NoValue
    Condition: NEEDSROLE

  SessionManagerPolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join
        - '-'
        - - ai-unlimited
          - session
          - !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - ssm:DescribeAssociation
              - ssm:GetDeployablePatchSnapshotForInstance
              - ssm:GetDocument
              - ssm:DescribeDocument
              - ssm:GetManifest
              - ssm:ListAssociations
              - ssm:ListInstanceAssociations
              - ssm:PutInventory
              - ssm:PutComplianceItems
              - ssm:PutConfigurePackageResult
              - ssm:UpdateAssociationStatus
              - ssm:UpdateInstanceAssociationStatus
              - ssm:UpdateInstanceInformation
            Resource: '*'
          - Effect: Allow
            Action:
              - ssmmessages:CreateControlChannel
              - ssmmessages:CreateDataChannel
              - ssmmessages:OpenControlChannel
              - ssmmessages:OpenDataChannel
            Resource: '*'
          - Effect: Allow
            Action:
              - ec2messages:AcknowledgeMessage
              - ec2messages:DeleteMessage
              - ec2messages:FailMessage
              - ec2messages:GetEndpoint
              - ec2messages:GetMessages
              - ec2messages:SendReply
            Resource: '*'
      Roles:
        - !Ref AiUnlimitedRole
    Condition: NEEDSROLEANDSESSIONMANAGER

  AiUnlimitedRolePolicies:
    Type: AWS::IAM::Policy
    Properties:
      PolicyName: !Join
        - '-'
        - - ai-unlimited
          - deploy
          - !Select
            - 4
            - !Split
              - '-'
              - !Select
                - 2
                - !Split
                  - /
                  - !Ref AWS::StackId
      PolicyDocument:
        Version: "2012-10-17"
        Statement:
          - Effect: Allow
            Action:
              - iam:PassRole
              - iam:AddRoleToInstanceProfile
              - iam:CreateInstanceProfile
              - iam:CreateRole
              - iam:DeleteInstanceProfile
              - iam:DeleteRole
              - iam:DeleteRolePolicy
              - iam:GetInstanceProfile
              - iam:GetRole
              - iam:GetRolePolicy
              - iam:ListAttachedRolePolicies
              - iam:ListInstanceProfilesForRole
              - iam:ListRolePolicies
              - iam:PutRolePolicy
              - iam:RemoveRoleFromInstanceProfile
              - iam:TagRole
              - iam:TagInstanceProfile
              - ec2:TerminateInstances
              - ec2:RunInstances
              - ec2:RevokeSecurityGroupEgress
              - ec2:ModifyInstanceAttribute
              - ec2:ImportKeyPair
              - ec2:DescribeVpcs
              - ec2:DescribeVolumes
              - ec2:DescribeTags
              - ec2:DescribeSubnets
              - ec2:DescribeSecurityGroups
              - ec2:DescribePlacementGroups
              - ec2:DescribeNetworkInterfaces
              - ec2:DescribeLaunchTemplates
              - ec2:DescribeLaunchTemplateVersions
              - ec2:DescribeKeyPairs
              - ec2:DescribeInstanceTypes
              - ec2:DescribeInstanceTypeOfferings
              - ec2:DescribeInstances
              - ec2:DescribeInstanceAttribute
              - ec2:DescribeImages
              - ec2:DescribeAccountAttributes
              - ec2:DescribeAvailabilityZones
              - ec2:DescribeVpcAttribute
              - ec2:DeleteSecurityGroup
              - ec2:DeletePlacementGroup
              - ec2:DeleteLaunchTemplate
              - ec2:DeleteKeyPair
              - ec2:CreateTags
              - ec2:CreateSecurityGroup
              - ec2:CreatePlacementGroup
              - ec2:CreateLaunchTemplateVersion
              - ec2:CreateLaunchTemplate
              - ec2:AuthorizeSecurityGroupIngress
              - ec2:AuthorizeSecurityGroupEgress
              - secretsmanager:CreateSecret
              - secretsmanager:DeleteSecret
              - secretsmanager:DescribeSecret
              - secretsmanager:GetResourcePolicy
              - secretsmanager:GetSecretValue
              - secretsmanager:PutSecretValue
              - secretsmanager:TagResource
              - s3:CreateBucket
              - s3:DeleteBucket
              - s3:PutObject
              - s3:GetObject
              - cloudformation:CreateStack
              - cloudformation:DeleteStack
              - cloudformation:DescribeStacks
              - cloudformation:ListStacks
              - cloudformation:DescribeStackEvents
              - ssm:PutParameter
              - ssm:GetParameter
              - ssm:DeleteParameter
              - ec2:RevokeSecurityGroupIngress
              - ec2:CreateInternetGateway
              - ec2:CreateVpc
              - ec2:DescribeInternetGateways
              - ec2:DeleteVpc
              - ec2:ModifyVpcAttribute
              - ec2:DeleteInternetGateway
              - ec2:CreateSubnet
              - ec2:CreateRouteTable
              - ec2:DescribeRouteTables
              - ec2:DeleteSubnet
              - ec2:DeleteRouteTable
              - ec2:AttachInternetGateway
              - ec2:ModifySubnetAttribute
              - ec2:DetachInternetGateway
              - ec2:AssociateRouteTable
              - ec2:CreateRoute
              - ec2:DisassociateRouteTable
              - ec2:DeleteRoute
            Resource: '*'
      Roles:
        - !Ref AiUnlimitedRole
    Condition: NEEDSROLE

  AiUnlimitedInstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles: !If
        - NEEDSROLE
        - - !Ref AiUnlimitedRole
        - - !Ref IamRoleName

Outputs:
  PublicIP:
    Description: EC2 public IP
    Value: !GetAtt AiUnlimitedServer.PublicIp
    Condition: HASPUBLICIP

  PrivateIP:
    Description: EC2 private IP
    Value: !GetAtt AiUnlimitedServer.PrivateIp

  AiUnlimitedPublicUIAccess:
    Description: Teradata AI Unlimited public UI Access
    Value: !Sub http://${AiUnlimitedServer.PublicDnsName}:${ AiUnlimitedHttpPort }
    Condition: HASPUBLICIP

  AiUnlimitedPrivateUIAccess:
    Description: Teradata AI Unlimited private UI Access
    Value: !Sub http://${AiUnlimitedServer.PrivateDnsName}:${ AiUnlimitedHttpPort }

  AiUnlimitedPublicAPIAccess:
    Description: Teradata AI Unlimited public API Access
    Value: !Sub http://${AiUnlimitedServer.PublicDnsName}:${ AiUnlimitedGrpcPort }
    Condition: HASPUBLICIP

  AiUnlimitedPrivateAPIAccess:
    Description: Teradata AI Unlimited private API Access
    Value: !Sub http://${AiUnlimitedServer.PrivateDnsName}:${ AiUnlimitedGrpcPort }

  InstanceSecurityGroups:
    Description: AI Unlimited Security Group
    Value: !Join
      - ', '
      - - !GetAtt AiUnlimitedSecurityGroup.GroupId
        - !GetAtt AiUnlimitedSchedulerSecurityGroup.GroupId
        - !If
          - HASKEYANDCIDRORPREFIXLISTORSECGROUP
          - !GetAtt SecurityGroupIngress.GroupId
          - !Ref AWS::NoValue

  PublicSSHConeection:
    Description: AI Unlimited ssh connnection string
    Value: !Sub ssh ec2-user@${ AiUnlimitedServer.PublicIp }
    Condition: HASKEYANDPUBLIC

  PrivateSSHConeection:
    Description: AI Unlimited ssh connnection string
    Value: !Sub ssh ec2-user@${ AiUnlimitedServer.PrivateIp }
    Condition: HASKEY

  PersistentVolumeId:
    Description: Id of the new persistent volume created for AI Unlimited
    Value: !Ref AiUnlimitedVolume
    Condition: USENEWPERSISTENTVOLUME
